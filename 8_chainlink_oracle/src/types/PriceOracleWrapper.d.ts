/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PriceOracleWrapperInterface extends ethers.utils.Interface {
  functions: {
    "getExternalOracle()": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "oracleDecimalPlaces()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExternalOracle(address)": FunctionFragment;
    "setOracleDecimalPlaces(int256)": FunctionFragment;
    "setUsdDecimalPlaces(int256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdDecimalPlaces()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getExternalOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleDecimalPlaces",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleDecimalPlaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdDecimalPlaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usdDecimalPlaces",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getExternalOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleDecimalPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleDecimalPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdDecimalPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdDecimalPlaces",
    data: BytesLike
  ): Result;

  events: {
    "NewExternalOracle(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetOracleDecimalPlaces(int256)": EventFragment;
    "SetUsdDecimalPlaces(int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewExternalOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleDecimalPlaces"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUsdDecimalPlaces"): EventFragment;
}

export type NewExternalOracleEvent = TypedEvent<[string] & { addr: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetOracleDecimalPlacesEvent = TypedEvent<
  [BigNumber] & { dp: BigNumber }
>;

export type SetUsdDecimalPlacesEvent = TypedEvent<
  [BigNumber] & { dp: BigNumber }
>;

export class PriceOracleWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceOracleWrapperInterface;

  functions: {
    getExternalOracle(overrides?: CallOverrides): Promise<[string]>;

    getPrice(
      _usdPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracleDecimalPlaces(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalOracle(
      _externalOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsdDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdDecimalPlaces(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getExternalOracle(overrides?: CallOverrides): Promise<string>;

  getPrice(
    _usdPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracleDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalOracle(
    _externalOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleDecimalPlaces(
    _dp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsdDecimalPlaces(
    _dp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getExternalOracle(overrides?: CallOverrides): Promise<string>;

    getPrice(
      _usdPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExternalOracle(
      _externalOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleDecimalPlaces(
      _dp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdDecimalPlaces(
      _dp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewExternalOracle(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    NewExternalOracle(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetOracleDecimalPlaces(int256)"(
      dp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { dp: BigNumber }>;

    SetOracleDecimalPlaces(
      dp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { dp: BigNumber }>;

    "SetUsdDecimalPlaces(int256)"(
      dp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { dp: BigNumber }>;

    SetUsdDecimalPlaces(
      dp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { dp: BigNumber }>;
  };

  estimateGas: {
    getExternalOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _usdPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalOracle(
      _externalOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsdDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdDecimalPlaces(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getExternalOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _usdPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleDecimalPlaces(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalOracle(
      _externalOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsdDecimalPlaces(
      _dp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdDecimalPlaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
