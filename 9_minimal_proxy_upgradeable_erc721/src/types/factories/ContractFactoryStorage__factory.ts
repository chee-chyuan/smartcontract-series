/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ContractFactoryStorage,
  ContractFactoryStorageInterface,
} from "../ContractFactoryStorage";

const _abi = [
  {
    inputs: [],
    name: "totalPaused",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalUnpaused",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060315760003560e01c8062eea8a21460365780632bf7dcc4146050575b600080fd5b603c606a565b604051604791906083565b60405180910390f35b60566070565b604051606191906083565b60405180910390f35b60025481565b60035481565b607d81609c565b82525050565b6000602082019050609660008301846076565b92915050565b600081905091905056fea264697066735822122007692badcabff8fcea5bd49822a025924c5f76bf4c4f27e77f04c92135fc50d064736f6c63430008040033";

export class ContractFactoryStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractFactoryStorage> {
    return super.deploy(overrides || {}) as Promise<ContractFactoryStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ContractFactoryStorage {
    return super.attach(address) as ContractFactoryStorage;
  }
  connect(signer: Signer): ContractFactoryStorage__factory {
    return super.connect(signer) as ContractFactoryStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractFactoryStorageInterface {
    return new utils.Interface(_abi) as ContractFactoryStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractFactoryStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ContractFactoryStorage;
  }
}
